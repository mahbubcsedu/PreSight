<HTMLQuestion xmlns="http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2011-11-11/HTMLQuestion.xsd">
  <HTMLContent><![CDATA[
<!DOCTYPE html>
<html>
<head>
<title>
</title>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js"></script>
<script src="https://code.jquery.com/jquery-1.10.2.js"></script>
<script type="text/javascript">

$(document).ready(function() {


var clickX = new Array();
var clickY = new Array();
var canvas = document.querySelector('canvas');
var context=canvas.getContext("2d");
var w = window.innerWidth/2;
var ar=0;
var h=0;
var points=0;


var myImage = new Image();
var isValid=true;

onPhotoDataSuccess(null);

$('#submitButton').attr("disabled","disabled");
$('#txtLength').attr("disabled","disabled");
$('#txtWidth').attr("disabled","disabled");
$('#previewButton').attr("disabled","disabled");

$('#previewButton').click(function(e) {

   if(($('#txtWidth').val().trim().length==0) || ($('#txtLength').val().trim().length==0)) {
   	alert("Enter both length and width of sidewalk tile.");
   	return;
   } 
   
   if (isNaN($('#txtWidth').val().trim())==true) {
	alert("Enter NUMERIC value for width of sidewalk.");
   	return;
   }
  
   if (isNaN($('#txtLength').val().trim())==true) {
	alert("Enter NUMERIC value for length of sidewalk.");
   	return;
   }
  
   if(parseFloat($('#txtWidth').val().trim())<=0.0) {
   	alert("Width must be greater than zero");
   	return;
   }
 
   if(parseFloat($('#txtLength').val().trim())<=0.0) {
   	alert("Length must be greater than zero");
   	return;
   }
      
   if($('#label1').text().trim().length==0) {
   	alert("Select appropriate unit for the dimensions and then submit.");
   	return;
   }  

	var url = 'http://mpss.csce.uark.edu/wheelnav/distance_determination/coreForTurkers/script.php?';
	var unit = $('#label1').text().trim();
	if(unit=='centimeter') {
		unit='CENTIMETER';
	}
	else if (unit=='feet') {
		unit='FOOT';
	}
	else if (unit=='inches') {
		unit='INCH';
	}
	var params = { 
		requestID:$('#requestID').val().trim(),
		stlength:$('#txtLength').val().trim(),
		stwidth:$('#txtWidth').val().trim(),
		cvheight:$('#canvasHeight').val().trim(),
		cvwidth:$('#canvasWidth').val().trim(),
		iheight:$('#imageHeight').val().trim(),
		iwidth:$('#imageWidth').val().trim(),
		stp1x:$('#point1_x').val().trim(),
		stp1y:$('#point1_y').val().trim(),
		stp2x:$('#point2_x').val().trim(),
		stp2y:$('#point2_y').val().trim(),
		stp3x:$('#point3_x').val().trim(),
		stp3y:$('#point3_y').val().trim(),
		stp4x:$('#point4_x').val().trim(),
		stp4y:$('#point4_y').val().trim(),
		dtype:$('#deviceType').val().trim(),
		pitch:$('#pitch').val().trim(),
		roll:$('#roll').val().trim(),
		bbleft:$('#bbleft').val().trim(),
		bbright:$('#bbright').val().trim(),
		bbtop:$('#bbtop').val().trim(),
		bbbottom:$('#bbbottom').val().trim(),
		aunit:unit
	 };
	 var str = jQuery.param(params);
	 url = url + str;
	 window.open(url);
	 /*
 	 jQuery.ajax({
   			type: 'GET',
   			url: 'http://mpss.csce.uark.edu/wheelnav/distance_determination/coreForTurkers/script.php',
   			data: {	requestID:'274', 
 				stlength:'48',
 				stwidth:'48',
 				cvheight:'835.3333333333334',
 				cvwidth:'626.5',
 				iheight:'1032.0',
 				iwidth:'774.0',
 				stp1x:'213',
 				stp1y:'259',
 				stp2x:'429',
 				stp2y:'254',
 				stp3x:'475',
 				stp3y:'475',
 				stp4x:'153',
 				stp4y:'473',
 				dtype:'NEXUS',
 				pitch:'-1.85891',
 				roll:'90.3725',
 				bbleft:'258',
 				bbright:'516',
 				bbtop:'343',
 				bbbottom:'687',
 				aunit:'INCH'},
   			dataType: 'jsonp',
			success:function(response){
				alert(response.url);
			}
		});
		*/
});

$('#mturk_form').submit(function (evt) {
   
   if(($('#txtWidth').val().trim().length==0) || ($('#txtLength').val().trim().length==0)) {
   	alert("Enter both length and width of sidewalk tile and then submit.");
   	evt.preventDefault();
   	return;
   } 
   
   if (isNaN($('#txtWidth').val().trim())==true) {
	alert("Enter NUMERIC value for width of sidewalk.");
   	evt.preventDefault();
   	return;
   }
  
   if (isNaN($('#txtLength').val().trim())==true) {
	alert("Enter NUMERIC value for length of sidewalk.");
   	evt.preventDefault();
   	return;
   }
  
   if(parseFloat($('#txtWidth').val().trim())<=0.0) {
   	alert("Width must be greater than zero");
   	evt.preventDefault();
   	return;
   }
 
   if(parseFloat($('#txtLength').val().trim())<=0.0) {
   	alert("Length must be greater than zero");
   	evt.preventDefault();
   	return;
   }
      
   if($('#label1').text().trim().length==0) {
   	alert("Select appropriate unit for the dimensions and then submit.");
   	evt.preventDefault();
   	return;
   }  

});

$('#radio_foot').click(function(e) {
	$('#label1').text('feet');
	$('#label2').text('feet');
	$('#txtWidth').val('');
	$('#txtLength').val('');
});

$('#radio_inch').click(function(e) {
	$('#label1').text('inches');
	$('#label2').text('inches');
	$('#txtWidth').val('');
	$('#txtLength').val('');
});

$('#radio_cm').click(function(e) {
	$('#label1').text('centimeter');
	$('#label2').text('centimeter');
	$('#txtWidth').val('');
	$('#txtLength').val('');
});


$('#btnReset').click(function(e) {

	while(clickX.length > 0) {
		clickX.pop();
		clickY.pop();
	}
	points=0;
	context.clearRect(0, 0, context.canvas.width, context.canvas.height); // Clears the canvas
	context.drawImage(myImage, 0, 0, w, h);
	$("#point1_x").val("");
	$("#point1_y").val("");
	$("#point2_x").val("");
	$("#point2_y").val("");
	$("#point3_x").val("");
	$("#point3_y").val("");
	$("#point4_x").val("");
	$("#point4_y").val("");
	
	$('#submitButton').attr("disabled","disabled");

	$("#txtLength").val("");
	$('#txtLength').attr("disabled","disabled");

	$("#txtWidth").val("");
	$('#txtWidth').attr("disabled","disabled");

	$('#previewButton').attr("disabled","disabled");

	isValid=true;
});

$('#can1').mousedown(function(e){

	if(isValid) {
		var parentOffset = $(this).parent().offset();
		var mouseX = e.pageX - parentOffset.left;
		var mouseY = e.pageY - parentOffset.top;
		addClick(mouseX, mouseY);
		points++;
		
		if(points==1) {
			$("#point1_x").val(mouseX);
			$("#point1_y").val(mouseY);
		}
		if(points==2) {
			$("#point2_x").val(mouseX);
			$("#point2_y").val(mouseY);
		}
		if(points==3) {
			$("#point3_x").val(mouseX);
			$("#point3_y").val(mouseY);
		}
		if(points==4) {
			$("#point4_x").val(mouseX);
			$("#point4_y").val(mouseY);
		}
		
		if(points>=4) {
			isValid=false;
		}
		redraw(mouseX, mouseY);
	}	
});


$('#can1').mousemove(function(e){
	if(isValid) {
		var parentOffset = $(this).parent().offset();
		var mouseX = e.pageX - parentOffset.left;
		var mouseY = e.pageY - parentOffset.top;
		redraw(mouseX, mouseY);
	}
});


$('#can1').mouseup(function(e){
	if(isValid) {
		var parentOffset = $(this).parent().offset();
		var mouseX = e.pageX - parentOffset.left;
		var mouseY = e.pageY - parentOffset.top;
		redraw(mouseX, mouseY);
	}
});

$('#can1').mouseleave(function(e){
	if(isValid) {
		var parentOffset = $(this).parent().offset();
		var mouseX = e.pageX - parentOffset.left;
		var mouseY = e.pageY - parentOffset.top;
		redraw(mouseX, mouseY);
	}
});

function addClick(x, y)
{
  clickX.push(x);
  clickY.push(y);
}

function onPhotoDataSuccess(imageData) 
{	
	myImage.onload = function() { 
	ar = myImage.width/myImage.height;
	if(myImage.width<w) {
		w=myImage.width;
	}
	h = w/ar;
	    	
    	//fitToContainer(w, h);
    	//context.drawImage(myImage, 0, 0, w, h);
  	fitToContainer(${canvasWidth}, ${canvasHeight});
    	context.drawImage(myImage, 0, 0, ${canvasWidth}, ${canvasHeight});
    	
    	context.save();
	}     

    myImage.src = "http://mpss.csce.uark.edu/wheelnav/Image_Capture/${imageName}";
}


function fitToContainer(width, height){

	canvas.style.width=width;
	canvas.style.height=height;
	canvas.width  = canvas.offsetWidth;
	canvas.height = canvas.offsetHeight;
}

function redrawFinal() {

  var firstPointIndex=-1;
  var lastPointIndex=-1;
  var firstSmallest=-1;
  var secondSmallest=-1;
  
		for(var i=0;i<4;i++) {
			if(firstSmallest==-1) {
				firstSmallest=i;
			}
			else if(secondSmallest==-1) {
				if(parseFloat(clickX[i])<parseFloat(clickX[firstSmallest])) {
					secondSmallest=firstSmallest;
					firstSmallest=i;
				}
				else {
					secondSmallest=i;
				}
			}
			else {
				if(parseFloat(clickX[i])<parseFloat(clickX[secondSmallest])) {
					secondSmallest=i;
					if(parseFloat(clickX[i])<parseFloat(clickX[firstSmallest])) {
						secondSmallest=firstSmallest;
						firstSmallest=i;
					}
				}
			}
		}

	if(clickY[firstSmallest]>clickY[secondSmallest]) {
			firstPointIndex=secondSmallest;
			lastPointIndex=firstSmallest;
		}
		else {
			firstPointIndex=firstSmallest;
			lastPointIndex=secondSmallest;
		}
		
		var newClickX = new Array();
		var newClickY = new Array();
		
		newClickX[0]=clickX[firstPointIndex];
		newClickY[0]=clickY[firstPointIndex];
		
		newClickX[3]=clickX[lastPointIndex];
		newClickY[3]=clickY[lastPointIndex];
		
		if(firstPointIndex==0 && lastPointIndex==1) {
			newClickX[1]=clickX[3];
			newClickY[1]=clickY[3];
			newClickX[2]=clickX[2];
			newClickY[2]=clickY[2];
		}
		else if(firstPointIndex==1 && lastPointIndex==0) {
			newClickX[1]=clickX[2];
			newClickY[1]=clickY[2];
			newClickX[2]=clickX[3];
			newClickY[2]=clickY[3];
		}
		else if(firstPointIndex==1 && lastPointIndex==2) {
			newClickX[1]=clickX[0];
			newClickY[1]=clickY[0];
			newClickX[2]=clickX[3];
			newClickY[2]=clickY[3];
		}
		else if(firstPointIndex==2 && lastPointIndex==1) {
			newClickX[1]=clickX[3];
			newClickY[1]=clickY[3];
			newClickX[2]=clickX[0];
			newClickY[2]=clickY[0];
		}
		else if(firstPointIndex==2 && lastPointIndex==3) {
			newClickX[1]=clickX[1];
			newClickY[1]=clickY[1];
			newClickX[2]=clickX[0];
			newClickY[2]=clickX[0];
		}
		else if(firstPointIndex==3 && lastPointIndex==2) {
			newClickX[1]=clickX[0];
			newClickY[1]=clickY[0];
			newClickX[2]=clickX[1];
			newClickY[2]=clickY[1];
		}
		else if(firstPointIndex==0 && lastPointIndex==3) {
			newClickX[1]=clickX[1];
			newClickY[1]=clickY[1];
			newClickX[2]=clickX[2];
			newClickY[2]=clickY[2];
		}
		else if(firstPointIndex==3 && lastPointIndex==0) {
			newClickX[1]=clickX[2];
			newClickY[1]=clickY[2];
			newClickX[2]=clickX[1];
			newClickY[2]=clickY[1];
		}
		
		
		if(newClickX[0]<newClickX[1] && newClickX[3]<newClickX[2] && newClickY[0]<newClickY[3] && newClickY[1]<newClickY[2]) {
		
  context.clearRect(0, 0, context.canvas.width, context.canvas.height); // Clears the canvas
  context.drawImage(myImage, 0, 0, w, h);
  
  context.strokeStyle = 'blue';
  context.lineJoin = "round";
  context.lineWidth = 5;
  
  context.beginPath();
  context.moveTo(newClickX[0], newClickY[0]);
  context.lineTo(newClickX[1], newClickY[1]);
  context.closePath();
  context.stroke();

  context.beginPath();
  context.moveTo(newClickX[2], newClickY[2]);
  context.lineTo(newClickX[3], newClickY[3]);
  context.closePath();
  context.stroke();

  context.strokeStyle = 'red';
	
  context.beginPath();
  context.moveTo(newClickX[1], newClickY[1]);
  context.lineTo(newClickX[2], newClickY[2]);
  context.closePath();
  context.stroke();

  context.beginPath();
  context.moveTo(newClickX[3], newClickY[3]);
  context.lineTo(newClickX[0], newClickY[0]);
  context.closePath();
  context.stroke();
  
  $('#submitButton').removeAttr("disabled");
  $('#txtLength').removeAttr("disabled");
  $('#txtWidth').removeAttr("disabled");
  $('#previewButton').removeAttr("disabled");
}
else {
	alert('Invalid Quadrilateral');
}
}

function redraw(x, y){

  if (points!=4) {
  
  context.clearRect(0, 0, context.canvas.width, context.canvas.height); // Clears the canvas
  context.drawImage(myImage, 0, 0, w, h);
  if(points>0) {
	context.restore();
  }
  context.strokeStyle = "#df4b26";
  context.lineJoin = "round";
  context.lineWidth = 5;
			
  for(var i=0; i < clickX.length; i++) {		
    context.beginPath();
    if(i){
      context.moveTo(clickX[i-1], clickY[i-1]);
     }else{
       context.moveTo(clickX[i], clickY[i]);
     }
     context.lineTo(clickX[i], clickY[i]);
     context.closePath();
     context.stroke();
  }
  
  if(points==4) {
	context.beginPath();
	context.moveTo(clickX[clickX.length-1], clickY[clickX.length-1]);
	context.lineTo(clickX[0], clickY[0]);
	context.closePath();
	context.stroke();
  }
  else {
	context.save();
	context.beginPath();
	context.moveTo(clickX[clickX.length-1], clickY[clickX.length-1]);
	context.lineTo(x, y);
	context.closePath();
	context.stroke();
  }
  }
  else {
  	redrawFinal();
  }
}

});

</script>

<script type='text/javascript' src='https://s3.amazonaws.com/mturk-public/externalHIT_v1.js'></script>

<style type="text/css">
</style>
</head>
<body>

<input type="text" id="deviceType" name="deviceType" value="${deviceType}" style="display:none;" />
<input type="text" id="pitch" name="pitch" value="${pitch}" style="display:none;" />
<input type="text" id="roll" name="roll" value="${roll}" style="display:none;" />
<input type="text" id="bbleft" name="bbleft" value="${bbleft}" style="display:none;" />
<input type="text" id="bbright" name="bbright" value="${bbright}" style="display:none;" />
<input type="text" id="bbtop" name="bbtop" value="${bbtop}" style="display:none;" />
<input type="text" id="bbbottom" name="bbbottom" value="${bbbottom}" style="display:none;"/>

<table border="1" width="100%">
	<tr>
		<th colspan="2" align="centre">
			Project WheelNav [MPSS Lab, University of Maryland Baltimore County]
		</th>
	</tr>
	<tr>
		<td width="50%">
			<table>
				<tr>
					<td>
						<button name="btnReset" id="btnReset" value="Reset">RESET</button>
					</td>
				<tr>
			</table>
		</td>
		<td rowspan="2" width="50%" align="top">
			<table>
				<tr>
					<td align="center">
						<table>
						<tr><td> Step 1: Check this tutorial about top-down views of sidewalk tiles and their dimensions:
						<a href="http://mpss.csce.uark.edu/wheelnav/distance_determination/turkers_tutorial.html">Top-Down Views of sidewalk tiles</a> 
						<br/><br/><br/>
						</td></tr>
						<tr><td>
						Step 2: Identify any sidewalk tile in the given image, and mark edges of it. You can plot four points and draw a quadrilateral along the boundary of a tile. 
						<br/><br/><br/>
						</td></tr>
						<tr><td>
						Step 3: Provide your estimate of dimensions(length, width) of the marked sidewalk tile. <br/><br/><br/>
						</td></tr>
						<tr><td>
						Step 4: Check preview of top-down view generated with your estimate of dimensions - verify and submit.
						</td></tr>

						
						</table>
						[Request: ${requestID}, Image: ${imageName}]
					</td>
				</tr>
			</table>
		<form name='mturk_form' method='post' id='mturk_form' action='https://www.mturk.com/mturk/externalSubmit'>			
			<table>
			<tr><td><input type="text" id="point1_x" name="point1_x" style="display:none;" /></td></tr>
			<tr><td><input type="text" id="point1_y" name="point1_y" style="display:none;" /></td></tr>
			<tr><td><input type="text" id="point2_x" name="point2_x" style="display:none;" /></td></tr>
			<tr><td><input type="text" id="point2_y" name="point2_y" style="display:none;" /></td></tr>
			<tr><td><input type="text" id="point3_x" name="point3_x" style="display:none;" /></td></tr>
			<tr><td><input type="text" id="point3_y" name="point3_y" style="display:none;"/></td></tr>
			<tr><td><input type="text" id="point4_x" name="point4_x" style="display:none;" /></td></tr>
			<tr><td><input type="text" id="point4_y" name="point4_y" style="display:none;" /></td></tr>
			</table>
			
  			<input type='hidden' value='' name='assignmentId' id='assignmentId'/>
			<table align="center" border="1">
				<tr>
					<td><table>
						<tr>
							<td>Select Unit:</td>
							<td><input type="radio" name="unit" value="FOOT" id="radio_foot">foot</td>
							<td><input type="radio" name="unit" value="INCH" id="radio_inch">inch</td>
							<td><input type="radio" name="unit" value="CENTIMETER" id="radio_cm">centimeter</td>
						</tr>
					</table></td>
				</tr>
				<tr>
					<td>
						Width of sidewalk tile (<FONT COLOR="#0000FF">Blue </FONT>edges): 
					</td>
					<td>
						<input type="text" id="txtWidth" name="txtWidth"/> <label id="label1" name="label1"></label>
					</td>				
				</tr>
				<tr>
					<td>
						Length of sidewalk tile (<FONT COLOR="#FF0000">RED </FONT>edges): 
					</td>
					<td>
						<input type="text" id="txtLength" name="txtLength"/> <label id="label2" name="label2"></label>
					</td>				
				</tr>
				<tr>
					<td colspan="2" align="center">
					<p><input type='submit' id='submitButton' value='Submit' /></p>
					<script language='Javascript'>turkSetAssignmentID();</script>
					<p><button type='button' id='previewButton'>Preview</button></p>
		<p><input type="text" id="requestID" name="requestID" value="${requestID}" style="display:none;" /></p>
		<p><input type="text" id="imageWidth" name="imageWidth" value="${imageWidth}" style="display:none;" /></p>			
		<p><input type="text" id="imageHeight" name="imageHeight" value="${imageHeight}" style="display:none;" /></p>
		<p><input type="text" id="canvasWidth" name="canvasWidth" value="${canvasWidth}" style="display:none;" /></p>			
		<p><input type="text" id="canvasHeight" name="canvasHeight" value="${canvasHeight}" style="display:none;" /></p>
					</td>
				</tr>

			</table>
		</form>
		</td>
	</tr>
	<tr>
		<td width="50%">
		<div>
			<canvas id="can1" width="${canvasWidth}" height="${canvasHeight}"></canvas>
		</div>
		</td>
	</tr>
</table>

</body>
</html>]]>
  </HTMLContent>
  <FrameHeight>1000</FrameHeight>
</HTMLQuestion>
